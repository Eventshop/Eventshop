// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EmageMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmageMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  EmageMsg_descriptor_ = file->message_type(0);
  static const int EmageMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, lat_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, long_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, sw_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, sw_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, ne_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, ne_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, num_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, cell_),
  };
  EmageMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmageMsg_descriptor_,
      EmageMsg::default_instance_,
      EmageMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmageMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmageMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmageMsg_descriptor_, &EmageMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete EmageMsg::default_instance_;
  delete EmageMsg_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\330\001\n\010EmageMsg\022\r\n\005theme\030\001 "
    "\001(\t\022\022\n\nstart_time\030\002 \001(\003\022\020\n\010end_time\030\003 \001("
    "\003\022\020\n\010lat_unit\030\004 \001(\001\022\021\n\tlong_unit\030\005 \001(\001\022\016"
    "\n\006sw_lat\030\006 \001(\001\022\017\n\007sw_long\030\007 \001(\001\022\016\n\006ne_la"
    "t\030\010 \001(\001\022\017\n\007ne_long\030\t \001(\001\022\020\n\010num_rows\030\n \001"
    "(\005\022\020\n\010num_cols\030\013 \001(\005\022\014\n\004cell\030\014 \003(\001", 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  EmageMsg::default_instance_ = new EmageMsg();
  EmageMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int EmageMsg::kThemeFieldNumber;
const int EmageMsg::kStartTimeFieldNumber;
const int EmageMsg::kEndTimeFieldNumber;
const int EmageMsg::kLatUnitFieldNumber;
const int EmageMsg::kLongUnitFieldNumber;
const int EmageMsg::kSwLatFieldNumber;
const int EmageMsg::kSwLongFieldNumber;
const int EmageMsg::kNeLatFieldNumber;
const int EmageMsg::kNeLongFieldNumber;
const int EmageMsg::kNumRowsFieldNumber;
const int EmageMsg::kNumColsFieldNumber;
const int EmageMsg::kCellFieldNumber;
#endif  // !_MSC_VER

EmageMsg::EmageMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmageMsg::InitAsDefaultInstance() {
}

EmageMsg::EmageMsg(const EmageMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmageMsg::SharedCtor() {
  _cached_size_ = 0;
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  lat_unit_ = 0;
  long_unit_ = 0;
  sw_lat_ = 0;
  sw_long_ = 0;
  ne_lat_ = 0;
  ne_long_ = 0;
  num_rows_ = 0;
  num_cols_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmageMsg::~EmageMsg() {
  SharedDtor();
}

void EmageMsg::SharedDtor() {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (this != default_instance_) {
  }
}

void EmageMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmageMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmageMsg_descriptor_;
}

const EmageMsg& EmageMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

EmageMsg* EmageMsg::default_instance_ = NULL;

EmageMsg* EmageMsg::New() const {
  return new EmageMsg;
}

void EmageMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::kEmptyString) {
        theme_->clear();
      }
    }
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    lat_unit_ = 0;
    long_unit_ = 0;
    sw_lat_ = 0;
    sw_long_ = 0;
    ne_lat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ne_long_ = 0;
    num_rows_ = 0;
    num_cols_ = 0;
  }
  cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmageMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string theme = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }
      
      // optional int64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }
      
      // optional int64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_lat_unit;
        break;
      }
      
      // optional double lat_unit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_unit_)));
          set_has_lat_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_long_unit;
        break;
      }
      
      // optional double long_unit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_long_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_unit_)));
          set_has_long_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_sw_lat;
        break;
      }
      
      // optional double sw_lat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sw_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sw_lat_)));
          set_has_sw_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_sw_long;
        break;
      }
      
      // optional double sw_long = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sw_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sw_long_)));
          set_has_sw_long();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ne_lat;
        break;
      }
      
      // optional double ne_lat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ne_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ne_lat_)));
          set_has_ne_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_ne_long;
        break;
      }
      
      // optional double ne_long = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ne_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ne_long_)));
          set_has_ne_long();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_num_rows;
        break;
      }
      
      // optional int32 num_rows = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rows_)));
          set_has_num_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_num_cols;
        break;
      }
      
      // optional int32 num_cols = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cols_)));
          set_has_num_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_cell;
        break;
      }
      
      // repeated double cell = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_cell())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cell())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_cell;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmageMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string theme = 1;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->theme(), output);
  }
  
  // optional int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }
  
  // optional int64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time(), output);
  }
  
  // optional double lat_unit = 4;
  if (has_lat_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat_unit(), output);
  }
  
  // optional double long_unit = 5;
  if (has_long_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->long_unit(), output);
  }
  
  // optional double sw_lat = 6;
  if (has_sw_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sw_lat(), output);
  }
  
  // optional double sw_long = 7;
  if (has_sw_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sw_long(), output);
  }
  
  // optional double ne_lat = 8;
  if (has_ne_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ne_lat(), output);
  }
  
  // optional double ne_long = 9;
  if (has_ne_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->ne_long(), output);
  }
  
  // optional int32 num_rows = 10;
  if (has_num_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_rows(), output);
  }
  
  // optional int32 num_cols = 11;
  if (has_num_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->num_cols(), output);
  }
  
  // repeated double cell = 12;
  for (int i = 0; i < this->cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->cell(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmageMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string theme = 1;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->theme(), target);
  }
  
  // optional int64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }
  
  // optional int64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end_time(), target);
  }
  
  // optional double lat_unit = 4;
  if (has_lat_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat_unit(), target);
  }
  
  // optional double long_unit = 5;
  if (has_long_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->long_unit(), target);
  }
  
  // optional double sw_lat = 6;
  if (has_sw_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sw_lat(), target);
  }
  
  // optional double sw_long = 7;
  if (has_sw_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sw_long(), target);
  }
  
  // optional double ne_lat = 8;
  if (has_ne_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ne_lat(), target);
  }
  
  // optional double ne_long = 9;
  if (has_ne_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->ne_long(), target);
  }
  
  // optional int32 num_rows = 10;
  if (has_num_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_rows(), target);
  }
  
  // optional int32 num_cols = 11;
  if (has_num_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->num_cols(), target);
  }
  
  // repeated double cell = 12;
  for (int i = 0; i < this->cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->cell(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmageMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string theme = 1;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }
    
    // optional int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }
    
    // optional int64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }
    
    // optional double lat_unit = 4;
    if (has_lat_unit()) {
      total_size += 1 + 8;
    }
    
    // optional double long_unit = 5;
    if (has_long_unit()) {
      total_size += 1 + 8;
    }
    
    // optional double sw_lat = 6;
    if (has_sw_lat()) {
      total_size += 1 + 8;
    }
    
    // optional double sw_long = 7;
    if (has_sw_long()) {
      total_size += 1 + 8;
    }
    
    // optional double ne_lat = 8;
    if (has_ne_lat()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double ne_long = 9;
    if (has_ne_long()) {
      total_size += 1 + 8;
    }
    
    // optional int32 num_rows = 10;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_rows());
    }
    
    // optional int32 num_cols = 11;
    if (has_num_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_cols());
    }
    
  }
  // repeated double cell = 12;
  {
    int data_size = 0;
    data_size = 8 * this->cell_size();
    total_size += 1 * this->cell_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmageMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmageMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmageMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmageMsg::MergeFrom(const EmageMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_.MergeFrom(from.cell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_lat_unit()) {
      set_lat_unit(from.lat_unit());
    }
    if (from.has_long_unit()) {
      set_long_unit(from.long_unit());
    }
    if (from.has_sw_lat()) {
      set_sw_lat(from.sw_lat());
    }
    if (from.has_sw_long()) {
      set_sw_long(from.sw_long());
    }
    if (from.has_ne_lat()) {
      set_ne_lat(from.ne_lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ne_long()) {
      set_ne_long(from.ne_long());
    }
    if (from.has_num_rows()) {
      set_num_rows(from.num_rows());
    }
    if (from.has_num_cols()) {
      set_num_cols(from.num_cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmageMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmageMsg::CopyFrom(const EmageMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmageMsg::IsInitialized() const {
  
  return true;
}

void EmageMsg::Swap(EmageMsg* other) {
  if (other != this) {
    std::swap(theme_, other->theme_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(lat_unit_, other->lat_unit_);
    std::swap(long_unit_, other->long_unit_);
    std::swap(sw_lat_, other->sw_lat_);
    std::swap(sw_long_, other->sw_long_);
    std::swap(ne_lat_, other->ne_lat_);
    std::swap(ne_long_, other->ne_long_);
    std::swap(num_rows_, other->num_rows_);
    std::swap(num_cols_, other->num_cols_);
    cell_.Swap(&other->cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmageMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmageMsg_descriptor_;
  metadata.reflection = EmageMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
