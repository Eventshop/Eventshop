package com.eventshop.eventshoplinux.domain.datasource.emage;




import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.UnknownFieldSet;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

public final class Message {
  private Message() {}
  public static void registerAllExtensions(
      ExtensionRegistry registry) {
  }
  public interface EmageMsgOrBuilder
      extends MessageOrBuilder {
    
    // optional string theme = 1;
    boolean hasTheme();
    String getTheme();
    
    // optional int64 start_time = 2;
    boolean hasStartTime();
    long getStartTime();
    
    // optional int64 end_time = 3;
    boolean hasEndTime();
    long getEndTime();
    
    // optional double lat_unit = 4;
    boolean hasLatUnit();
    double getLatUnit();
    
    // optional double long_unit = 5;
    boolean hasLongUnit();
    double getLongUnit();
    
    // optional double sw_lat = 6;
    boolean hasSwLat();
    double getSwLat();
    
    // optional double sw_long = 7;
    boolean hasSwLong();
    double getSwLong();
    
    // optional double ne_lat = 8;
    boolean hasNeLat();
    double getNeLat();
    
    // optional double ne_long = 9;
    boolean hasNeLong();
    double getNeLong();
    
    // optional int32 num_rows = 10;
    boolean hasNumRows();
    int getNumRows();
    
    // optional int32 num_cols = 11;
    boolean hasNumCols();
    int getNumCols();
    
    // repeated double cell = 12;
    java.util.List<java.lang.Double> getCellList();
    int getCellCount();
    double getCell(int index);
  }
  public static final class EmageMsg extends
      GeneratedMessage
      implements EmageMsgOrBuilder {
    // Use EmageMsg.newBuilder() to construct.
    private EmageMsg(Builder builder) {
      super(builder);
    }
    private EmageMsg(boolean noInit) {}
    
    private static final EmageMsg defaultInstance;
    public static EmageMsg getDefaultInstance() {
      return defaultInstance;
    }
    
    public EmageMsg getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final Descriptors.Descriptor
        getDescriptor() {
      return Message.internal_static_EmageMsg_descriptor;
    }
    
    protected GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Message.internal_static_EmageMsg_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional string theme = 1;
    public static final int THEME_FIELD_NUMBER = 1;
    private java.lang.Object theme_;
    public boolean hasTheme() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getTheme() {
      java.lang.Object ref = theme_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        if (Internal.isValidUtf8(bs)) {
          theme_ = s;
        }
        return s;
      }
    }
    private ByteString getThemeBytes() {
      java.lang.Object ref = theme_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8((String) ref);
        theme_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }
    
    // optional int64 start_time = 2;
    public static final int START_TIME_FIELD_NUMBER = 2;
    private long startTime_;
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public long getStartTime() {
      return startTime_;
    }
    
    // optional int64 end_time = 3;
    public static final int END_TIME_FIELD_NUMBER = 3;
    private long endTime_;
    public boolean hasEndTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public long getEndTime() {
      return endTime_;
    }
    
    // optional double lat_unit = 4;
    public static final int LAT_UNIT_FIELD_NUMBER = 4;
    private double latUnit_;
    public boolean hasLatUnit() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public double getLatUnit() {
      return latUnit_;
    }
    
    // optional double long_unit = 5;
    public static final int LONG_UNIT_FIELD_NUMBER = 5;
    private double longUnit_;
    public boolean hasLongUnit() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public double getLongUnit() {
      return longUnit_;
    }
    
    // optional double sw_lat = 6;
    public static final int SW_LAT_FIELD_NUMBER = 6;
    private double swLat_;
    public boolean hasSwLat() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public double getSwLat() {
      return swLat_;
    }
    
    // optional double sw_long = 7;
    public static final int SW_LONG_FIELD_NUMBER = 7;
    private double swLong_;
    public boolean hasSwLong() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public double getSwLong() {
      return swLong_;
    }
    
    // optional double ne_lat = 8;
    public static final int NE_LAT_FIELD_NUMBER = 8;
    private double neLat_;
    public boolean hasNeLat() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public double getNeLat() {
      return neLat_;
    }
    
    // optional double ne_long = 9;
    public static final int NE_LONG_FIELD_NUMBER = 9;
    private double neLong_;
    public boolean hasNeLong() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public double getNeLong() {
      return neLong_;
    }
    
    // optional int32 num_rows = 10;
    public static final int NUM_ROWS_FIELD_NUMBER = 10;
    private int numRows_;
    public boolean hasNumRows() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public int getNumRows() {
      return numRows_;
    }
    
    // optional int32 num_cols = 11;
    public static final int NUM_COLS_FIELD_NUMBER = 11;
    private int numCols_;
    public boolean hasNumCols() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public int getNumCols() {
      return numCols_;
    }
    
    // repeated double cell = 12;
    public static final int CELL_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Double> cell_;
    public java.util.List<java.lang.Double>
        getCellList() {
      return cell_;
    }
    public int getCellCount() {
      return cell_.size();
    }
    public double getCell(int index) {
      return cell_.get(index);
    }
    
    private void initFields() {
      theme_ = "";
      startTime_ = 0L;
      endTime_ = 0L;
      latUnit_ = 0D;
      longUnit_ = 0D;
      swLat_ = 0D;
      swLong_ = 0D;
      neLat_ = 0D;
      neLong_ = 0D;
      numRows_ = 0;
      numCols_ = 0;
      cell_ = java.util.Collections.emptyList();;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getThemeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, startTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, endTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, latUnit_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, longUnit_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, swLat_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, swLong_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, neLat_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, neLong_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, numRows_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, numCols_);
      }
      for (int i = 0; i < cell_.size(); i++) {
        output.writeDouble(12, cell_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += CodedOutputStream
          .computeBytesSize(1, getThemeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += CodedOutputStream
          .computeInt64Size(2, startTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += CodedOutputStream
          .computeInt64Size(3, endTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += CodedOutputStream
          .computeDoubleSize(4, latUnit_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += CodedOutputStream
          .computeDoubleSize(5, longUnit_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += CodedOutputStream
          .computeDoubleSize(6, swLat_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += CodedOutputStream
          .computeDoubleSize(7, swLong_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += CodedOutputStream
          .computeDoubleSize(8, neLat_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += CodedOutputStream
          .computeDoubleSize(9, neLong_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += CodedOutputStream
          .computeInt32Size(10, numRows_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += CodedOutputStream
          .computeInt32Size(11, numCols_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getCellList().size();
        size += dataSize;
        size += 1 * getCellList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static Message.EmageMsg parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Message.EmageMsg parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Message.EmageMsg parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Message.EmageMsg parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Message.EmageMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Message.EmageMsg parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static Message.EmageMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Message.EmageMsg parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Message.EmageMsg parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Message.EmageMsg parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Message.EmageMsg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        GeneratedMessage.Builder<Builder>
       implements Message.EmageMsgOrBuilder {
      public static final Descriptors.Descriptor
          getDescriptor() {
        return Message.internal_static_EmageMsg_descriptor;
      }
      
      protected GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Message.internal_static_EmageMsg_fieldAccessorTable;
      }
      
      // Construct using Message.EmageMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        theme_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        startTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        endTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        latUnit_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        longUnit_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        swLat_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        swLong_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        neLat_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        neLong_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        numRows_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        numCols_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        cell_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public Descriptors.Descriptor
          getDescriptorForType() {
        return Message.EmageMsg.getDescriptor();
      }
      
      public Message.EmageMsg getDefaultInstanceForType() {
        return Message.EmageMsg.getDefaultInstance();
      }
      
      public Message.EmageMsg build() {
        Message.EmageMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private Message.EmageMsg buildParsed()
          throws InvalidProtocolBufferException {
        Message.EmageMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public Message.EmageMsg buildPartial() {
        Message.EmageMsg result = new Message.EmageMsg(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.theme_ = theme_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.startTime_ = startTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.endTime_ = endTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.latUnit_ = latUnit_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.longUnit_ = longUnit_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.swLat_ = swLat_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.swLong_ = swLong_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.neLat_ = neLat_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.neLong_ = neLong_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.numRows_ = numRows_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.numCols_ = numCols_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          cell_ = java.util.Collections.unmodifiableList(cell_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.cell_ = cell_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Message.EmageMsg) {
          return mergeFrom((Message.EmageMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(Message.EmageMsg other) {
        if (other == Message.EmageMsg.getDefaultInstance()) return this;
        if (other.hasTheme()) {
          setTheme(other.getTheme());
        }
        if (other.hasStartTime()) {
          setStartTime(other.getStartTime());
        }
        if (other.hasEndTime()) {
          setEndTime(other.getEndTime());
        }
        if (other.hasLatUnit()) {
          setLatUnit(other.getLatUnit());
        }
        if (other.hasLongUnit()) {
          setLongUnit(other.getLongUnit());
        }
        if (other.hasSwLat()) {
          setSwLat(other.getSwLat());
        }
        if (other.hasSwLong()) {
          setSwLong(other.getSwLong());
        }
        if (other.hasNeLat()) {
          setNeLat(other.getNeLat());
        }
        if (other.hasNeLong()) {
          setNeLong(other.getNeLong());
        }
        if (other.hasNumRows()) {
          setNumRows(other.getNumRows());
        }
        if (other.hasNumCols()) {
          setNumCols(other.getNumCols());
        }
        if (!other.cell_.isEmpty()) {
          if (cell_.isEmpty()) {
            cell_ = other.cell_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureCellIsMutable();
            cell_.addAll(other.cell_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              theme_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              startTime_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              endTime_ = input.readInt64();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              latUnit_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              longUnit_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              swLat_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              swLong_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              neLat_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              neLong_ = input.readDouble();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              numRows_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              numCols_ = input.readInt32();
              break;
            }
            case 97: {
              ensureCellIsMutable();
              cell_.add(input.readDouble());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addCell(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional string theme = 1;
      private java.lang.Object theme_ = "";
      public boolean hasTheme() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getTheme() {
        java.lang.Object ref = theme_;
        if (!(ref instanceof String)) {
          String s = ((ByteString) ref).toStringUtf8();
          theme_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setTheme(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        theme_ = value;
        onChanged();
        return this;
      }
      public Builder clearTheme() {
        bitField0_ = (bitField0_ & ~0x00000001);
        theme_ = getDefaultInstance().getTheme();
        onChanged();
        return this;
      }
      void setTheme(ByteString value) {
        bitField0_ |= 0x00000001;
        theme_ = value;
        onChanged();
      }
      
      // optional int64 start_time = 2;
      private long startTime_ ;
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public long getStartTime() {
        return startTime_;
      }
      public Builder setStartTime(long value) {
        bitField0_ |= 0x00000002;
        startTime_ = value;
        onChanged();
        return this;
      }
      public Builder clearStartTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        startTime_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 end_time = 3;
      private long endTime_ ;
      public boolean hasEndTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public long getEndTime() {
        return endTime_;
      }
      public Builder setEndTime(long value) {
        bitField0_ |= 0x00000004;
        endTime_ = value;
        onChanged();
        return this;
      }
      public Builder clearEndTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        endTime_ = 0L;
        onChanged();
        return this;
      }
      
      // optional double lat_unit = 4;
      private double latUnit_ ;
      public boolean hasLatUnit() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public double getLatUnit() {
        return latUnit_;
      }
      public Builder setLatUnit(double value) {
        bitField0_ |= 0x00000008;
        latUnit_ = value;
        onChanged();
        return this;
      }
      public Builder clearLatUnit() {
        bitField0_ = (bitField0_ & ~0x00000008);
        latUnit_ = 0D;
        onChanged();
        return this;
      }
      
      // optional double long_unit = 5;
      private double longUnit_ ;
      public boolean hasLongUnit() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public double getLongUnit() {
        return longUnit_;
      }
      public Builder setLongUnit(double value) {
        bitField0_ |= 0x00000010;
        longUnit_ = value;
        onChanged();
        return this;
      }
      public Builder clearLongUnit() {
        bitField0_ = (bitField0_ & ~0x00000010);
        longUnit_ = 0D;
        onChanged();
        return this;
      }
      
      // optional double sw_lat = 6;
      private double swLat_ ;
      public boolean hasSwLat() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public double getSwLat() {
        return swLat_;
      }
      public Builder setSwLat(double value) {
        bitField0_ |= 0x00000020;
        swLat_ = value;
        onChanged();
        return this;
      }
      public Builder clearSwLat() {
        bitField0_ = (bitField0_ & ~0x00000020);
        swLat_ = 0D;
        onChanged();
        return this;
      }
      
      // optional double sw_long = 7;
      private double swLong_ ;
      public boolean hasSwLong() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public double getSwLong() {
        return swLong_;
      }
      public Builder setSwLong(double value) {
        bitField0_ |= 0x00000040;
        swLong_ = value;
        onChanged();
        return this;
      }
      public Builder clearSwLong() {
        bitField0_ = (bitField0_ & ~0x00000040);
        swLong_ = 0D;
        onChanged();
        return this;
      }
      
      // optional double ne_lat = 8;
      private double neLat_ ;
      public boolean hasNeLat() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public double getNeLat() {
        return neLat_;
      }
      public Builder setNeLat(double value) {
        bitField0_ |= 0x00000080;
        neLat_ = value;
        onChanged();
        return this;
      }
      public Builder clearNeLat() {
        bitField0_ = (bitField0_ & ~0x00000080);
        neLat_ = 0D;
        onChanged();
        return this;
      }
      
      // optional double ne_long = 9;
      private double neLong_ ;
      public boolean hasNeLong() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public double getNeLong() {
        return neLong_;
      }
      public Builder setNeLong(double value) {
        bitField0_ |= 0x00000100;
        neLong_ = value;
        onChanged();
        return this;
      }
      public Builder clearNeLong() {
        bitField0_ = (bitField0_ & ~0x00000100);
        neLong_ = 0D;
        onChanged();
        return this;
      }
      
      // optional int32 num_rows = 10;
      private int numRows_ ;
      public boolean hasNumRows() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public int getNumRows() {
        return numRows_;
      }
      public Builder setNumRows(int value) {
        bitField0_ |= 0x00000200;
        numRows_ = value;
        onChanged();
        return this;
      }
      public Builder clearNumRows() {
        bitField0_ = (bitField0_ & ~0x00000200);
        numRows_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 num_cols = 11;
      private int numCols_ ;
      public boolean hasNumCols() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public int getNumCols() {
        return numCols_;
      }
      public Builder setNumCols(int value) {
        bitField0_ |= 0x00000400;
        numCols_ = value;
        onChanged();
        return this;
      }
      public Builder clearNumCols() {
        bitField0_ = (bitField0_ & ~0x00000400);
        numCols_ = 0;
        onChanged();
        return this;
      }
      
      // repeated double cell = 12;
      private java.util.List<java.lang.Double> cell_ = java.util.Collections.emptyList();;
      private void ensureCellIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          cell_ = new java.util.ArrayList<java.lang.Double>(cell_);
          bitField0_ |= 0x00000800;
         }
      }
      public java.util.List<java.lang.Double>
          getCellList() {
        return java.util.Collections.unmodifiableList(cell_);
      }
      public int getCellCount() {
        return cell_.size();
      }
      public double getCell(int index) {
        return cell_.get(index);
      }
      public Builder setCell(
          int index, double value) {
        ensureCellIsMutable();
        cell_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addCell(double value) {
        ensureCellIsMutable();
        cell_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllCell(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureCellIsMutable();
        super.addAll(values, cell_);
        onChanged();
        return this;
      }
      public Builder clearCell() {
        cell_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:EmageMsg)
    }
    
    static {
      defaultInstance = new EmageMsg(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:EmageMsg)
  }
  
  private static Descriptors.Descriptor
    internal_static_EmageMsg_descriptor;
  private static
    GeneratedMessage.FieldAccessorTable
      internal_static_EmageMsg_fieldAccessorTable;
  
  public static Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rmessage.proto\"\330\001\n\010EmageMsg\022\r\n\005theme\030\001 " +
      "\001(\t\022\022\n\nstart_time\030\002 \001(\003\022\020\n\010end_time\030\003 \001(" +
      "\003\022\020\n\010lat_unit\030\004 \001(\001\022\021\n\tlong_unit\030\005 \001(\001\022\016" +
      "\n\006sw_lat\030\006 \001(\001\022\017\n\007sw_long\030\007 \001(\001\022\016\n\006ne_la" +
      "t\030\010 \001(\001\022\017\n\007ne_long\030\t \001(\001\022\020\n\010num_rows\030\n \001" +
      "(\005\022\020\n\010num_cols\030\013 \001(\005\022\014\n\004cell\030\014 \003(\001"
    };
    Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public ExtensionRegistry assignDescriptors(
            Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_EmageMsg_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_EmageMsg_fieldAccessorTable = new
            GeneratedMessage.FieldAccessorTable(
              internal_static_EmageMsg_descriptor,
              new java.lang.String[] { "Theme", "StartTime", "EndTime", "LatUnit", "LongUnit", "SwLat", "SwLong", "NeLat", "NeLong", "NumRows", "NumCols", "Cell", },
              Message.EmageMsg.class,
              Message.EmageMsg.Builder.class);
          return null;
        }
      };
    Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
